GIT BASH

/*** Limpiar la consolla
clear  

/*** Visualizar el directorio en que nos encontramos
pwd
ls -l para ver el contenido del directorio

/**crear un archivo
touch hola.txtt

/*** visualizar un archivo 

cat hola .txt

*** Ver los comandos utilizados
history

/*** Repetir un comando (se coloca el codigo del comando con un signo !)
!343

/** Borrar un archivo
git rm hola.txt

/** Para deshacer el add . y ya no guardar los cambios
git rm --cached prueba.txt

code prueba.txt (nos abre el visual studio code)

/*** Configuracion de usuario y correo 
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

/**** GIT RESTORE , recuperar archivos borrados del repositorio (tiene que haber hecho commit antes)
git restore

/*****GIT RESET
git reset nombredelarchivo.extension (BORRA EL ARCHIVO DEL REPOSITORIO9
git reset 979c9eca89260870978 --hard, (borra todos los cambios hasta este commit)
git reset 979c9eca89260870978 --soft, regresa a este commit pero mantiene los cambios en el staging


/**** GIT LOG, para ver los log y todos los commits que se han hecho 
git log
Con barra espaciadora se pueden mostrar todos los log en caso que no los muestre y muestre los dos puntos (:), q para salir

git log --stat, comando para ver todos los cambios que se han hecho en los diferentes commits


/****** GIT CHECKOUT, moverse entre los commits

git checkout 979c9eca892608709785fa3b5936febc116b529c (me regresa a un estado anterior antes del ultimo commit)
git checkout master --> nos regresa a la rama master donde estan todos los cambios
git checkout (codigo del commit que se obtiene de git log ) para moverse entre las ramas



/***COMANDOS DE VIM 
ESC --> :wq (para salir de vim)
Presionas i , para el modo insertar
ESC --> Shift+zz , Otra manera de salir de vim
Se pueden agregar coemntarios multilinea para los commits desde vim
:wq! para abortar el commit

presionar q (cuando se da el comando git log y aparecen dos puntos (:))

/** GIT SHOW **/
git show,  Nos muestra las diferencias que hay del commit actual al commit anterior

/** GIT DIFF
git diff 79c9eca892608709 92608709785fa3 , mostrar las diferencias entre un commit y otro


/** GIT COMMIT -A
git commit -a, esto manda directamente al staging, sin necesidad de hacer git add, es decir hace commit y add al mismo tiempo
git commit -am " descripcion del commit",  la misma funcionalidad pero este no entra a vim

/** GIT BRANCH

git branch nombrerama, Crea una nueva rama
gir checkout nombrerama, cambias de la rama principal a la nueva rama o viceversa
git branch, para ver las ramas creadas.

/** GIT MERGE
git merge nombrerama, dependiendo de adonde se quiera llevar los cambios debes de colocarte en esa rama, por ejemplo si quieres llevar los cambios hacia la rama master se debe asegurar que nos encontramos en la rama master antes de hacer el merge.

git merge Rama1 --no-edit para evitar que VIM se abra


/***********GIT HUB***********/

/****git remote****/
git remote add origin (ruta del repositorio en github) , para mandar el repositorio de manera remota

git remote
git remote -v , para ver a que tiene acceso el origin (repositorio remoto) si al fetch o al pull
git remote remove origin, para eliminar un origin cuando se ha creado mal el repositorio remoto y da conflictos

rm -rf .git , para eliminar un repositorio local al crearlo por error

git remote set-url origin url, donde la url es la obtenida del ssh del repositorio de github y es para cambiar el remote de https a ssh
/*******LLAVES SSH**********************/
ssh-keygen -t rsa -b 4096 -C "marioalexis.2007@gmail.com" , para crear una llave publica y privada SSH , esto es por equipo 
no por repositorio, colocarte en c/user/mario por ejemplo.

eval $(ssh-agent -s) para verificar que el servicio este corriendo
ssh-add ~/.ssh/id_rsa , a√±adir la llave privada que hemos creado, debes de estar en el directorio donde estan las llaves .ssh