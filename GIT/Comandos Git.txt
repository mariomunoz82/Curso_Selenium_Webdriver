GIT BASH

gitk para abrir un entorno grafico de la consola

/*** Limpiar la consolla
clear  

/*** Visualizar el directorio en que nos encontramos
pwd
ls -l para ver el contenido del directorio

/**crear un archivo
touch hola.txtt

/*** visualizar un archivo 

cat hola .txt

*** Ver los comandos utilizados
history

/*** Repetir un comando (se coloca el codigo del comando con un signo !)
!343

/** Borrar un archivo
git rm hola.txt

/** Para deshacer el add . y ya no guardar los cambios
git rm --cached prueba.txt

code prueba.txt (nos abre el visual studio code)

/*** Configuracion de usuario y correo ******/

git config --global user.name "John Doe"
git config --global user.email johndoe@example.com


/**** GIT RESTORE , recuperar archivos borrados del repositorio (tiene que haber hecho commit antes)
git restore

/*****GIT RESET
git reset nombredelarchivo.extension (BORRA EL ARCHIVO DEL REPOSITORIO9
git reset 979c9eca89260870978 --hard, (borra todos los cambios hasta este commit)
git reset 979c9eca89260870978 --soft, regresa a este commit pero mantiene los cambios en el staging


/**** GIT LOG**************/
git log , para ver los log y todos los commits que se han hecho 
Con barra espaciadora se pueden mostrar todos los log en caso que no los muestre y muestre los dos puntos (:), q para salir

git log --stat, comando para ver todos los cambios que se han hecho en los diferentes commits

git log --all --graph ,  Para ver de manera grafica los commits que se han realizado 

git log --all --graph --decorate --oneline, para ver de una manera mas compacta la grafica de los commits


/**************ALIAS***********************/

alias rama="git log --all --graph --decorate --oneline" , para crear un alias donde rama es el nombre del alias y lo que esta en comillas
es el comando a asociar, luego colocar en git solo el nombre del alias para que se ejecute el comando

unalias rama, para eliminar un alias donde rama es el nombre del alias


/****** GIT CHECKOUT , moverse entre los commits*******************/

git checkout 979c9eca892608709785fa3b5936febc116b529c (me regresa a un estado anterior antes del ultimo commit)
git checkout master --> nos regresa a la rama master donde estan todos los cambios
git checkout (codigo del commit que se obtiene de git log ) para moverse entre las ramas



/***COMANDOS DE VIM ***************/
ESC --> :wq (para salir de vim)
Presionas i , para el modo insertar
ESC --> Shift+zz , Otra manera de salir de vim
Se pueden agregar coemntarios multilinea para los commits desde vim
:wq! para abortar el commit

presionar q (cuando se da el comando git log y aparecen dos puntos (:))

/** GIT SHOW **/
git show,  Nos muestra las diferencias que hay del commit actual al commit anterior

/** GIT DIFF
git diff 79c9eca892608709 92608709785fa3 , mostrar las diferencias entre un commit y otro

git push origin Rama1, para hacer push a las demas ramas que no sean main y subirlas a github

/** GIT COMMIT -A
git commit -a, esto manda directamente al staging, sin necesidad de hacer git add, es decir hace commit y add al mismo tiempo
git commit -am " descripcion del commit",  la misma funcionalidad pero este no entra a vim

/** GIT BRANCH

git branch nombrerama, Crea una nueva rama
git checkout nombrerama, cambias de la rama principal a la nueva rama o viceversa
git branch, para ver las ramas creadas.

/** GIT MERGE
git merge nombrerama, dependiendo de adonde se quiera llevar los cambios debes de colocarte en esa rama, por ejemplo si quieres llevar los cambios hacia la rama master se debe asegurar que nos encontramos en la rama master antes de hacer el merge.

git merge Rama1 --no-edit para evitar que VIM se abra


/***********GIT HUB***********/

/****git remote****/
git remote add origin (ruta del repositorio en github) , para mandar el repositorio de manera remota

git remote
git remote -v , para ver a que tiene acceso el origin (repositorio remoto) si al fetch o al pull
git remote remove origin, para eliminar un origin cuando se ha creado mal el repositorio remoto y da conflictos

rm -rf .git , para eliminar un repositorio local al crearlo por error




/*******LLAVES SSH**********************/

/*** PASO 1 Crear la llave
ssh-keygen -t rsa -b 4096 -C "marioalexis.2007@gmail.com" , para crear una llave publica y privada SSH , esto es por equipo 
no por repositorio, colocarte en c/user/mario por ejemplo.

/****PASO 2 Verificar si el servicio esta encendido

eval $(ssh-agent -s) 

/****PASO 3, Añadir la base localmente
ssh-add ~/.ssh/id_rsa , debes de estar en el directorio donde estan las llaves .ssh


/*******PASO 4, Añadir la llave a Github

Irse al menu settings-> SSH and GPG Keys
luego al boton New SSH Key y ahi colocar el nombre de la llave y colocar el contenido del archivo id_rsa.pub luego dar click en Add SSH Key


/*** PASO 4 , cambiar el remote
git remote set-url origin url, donde la url es la obtenida del ssh del repositorio de github y es para cambiar el remote de https a ssh


/******GIT TAG******/
git tag -a nombretag -m "descripcion" codigo del commit , para agregar un TAG, se pueden visualizar especialmente en Git Hub

git tag , para ver los tags que se han creado

git push origin --tags, para subir los tags creados a Github

git show-ref --tags, muestra la referencia del tag creado

git tag -d nombredelTAg , para borrar el tag de git
git push origin:refs/tags/nombredelTAg para borrar de github


/****AGREGAR COLABORADORES***/
Ir a los settings delrepositorio (no del usuario) luego a la opcion Collaborators y luego al boton Add people
Luego buscar el usuario que sera el colaborador de nuestro proyecto y enviar la invitacion
El nuevo colaborador debe de clonar el repositorio.